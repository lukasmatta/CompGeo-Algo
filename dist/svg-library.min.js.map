{"version":3,"file":"svg-library.min.js","sources":["../src/Canvas.ts","../src/Utils.ts","../src/ConvexHull.ts","../src/Triangulation.ts","../src/KDTree.ts","../src/index.ts"],"sourcesContent":["export interface Point {\n  x: number;\n  y: number;\n  color: string;\n}\n\nexport type SvgInHtml = HTMLElement & SVGElement;\nexport type SvgCircle = HTMLElement & SVGCircleElement;\nexport type SvgLine = HTMLElement & SVGLineElement;\n\nexport const SVG_NAMESPACE = \"http://www.w3.org/2000/svg\";\n\nexport interface Polygon {\n  points: SvgCircle[];\n  lines: SvgLine[];\n}\n\nexport class Canvas {\n  private points: SvgCircle[] = [];\n  private canvas: SvgInHtml;\n  private draggingObject: SvgCircle;\n  private dragging = false;\n  private polygon: Polygon = { points: [], lines: [] };\n  private creatingPolygon = false;\n\n  constructor(canvasId: string) {\n    this.canvas = <SvgInHtml>document.getElementById(canvasId);\n    this.canvas.addEventListener(\"mousemove\", this.drag.bind(this));\n    this.canvas.addEventListener(\"mouseup\", this.endDrag.bind(this));\n    this.canvas.addEventListener(\"mouseleave\", this.endDrag.bind(this));\n    this.canvas.addEventListener(\"dblclick\", this.addPointOnClick.bind(this));\n    this.canvas.addEventListener(\"click\", this.addPolygonPoint.bind(this));\n  }\n\n  /**\n   * Returns points in canvas\n   */\n  public getPoints(): SvgCircle[] {\n    return this.points;\n  }\n\n  /**\n   * Returns svg canvas\n   */\n  public getCanvas(): SvgInHtml {\n    return this.canvas;\n  }\n\n  /**\n   * Adds point to canvas\n   * @param x x coordinate\n   * @param y y coordinate\n   * @param color color of point\n   */\n  public addPoint(x: number, y: number, color?: string): SvgCircle {\n    console.log(\"point\", x, y, color);\n    const circle: SvgCircle = <SvgCircle>document.createElementNS(SVG_NAMESPACE, \"circle\");\n    circle.setAttributeNS(null, \"cx\", x.toString());\n    circle.setAttributeNS(null, \"cy\", y.toString());\n    circle.setAttributeNS(null, \"r\", \"3\");\n    circle.setAttributeNS(\n      null,\n      \"style\",\n      `fill: ${color || \"black\"}; stroke: ${color || \"black\"}; stroke-width: 1px; cursor: move;`\n    );\n    circle.addEventListener(\"mousedown\", this.startDrag.bind(this));\n\n    this.points.push(circle);\n    this.canvas.appendChild(circle);\n    return circle;\n  }\n\n  /**\n   * Adds point on click\n   * @param event click event\n   */\n  private addPointOnClick(event: MouseEvent): SvgCircle {\n    return this.addPoint(event.offsetX, event.offsetY);\n  }\n\n  /**\n   * Sets background color of canvas\n   * @param color\n   */\n  public setBackgroundColor(color: string) {\n    this.canvas.style.backgroundColor = color;\n  }\n\n  /**\n   * Starts dragging point on click\n   * @param event mousedown event\n   */\n  private startDrag(event: MouseEvent) {\n    this.draggingObject = <SvgCircle>event.target;\n    this.draggingObject.style.fill = \"red\";\n    this.dragging = true;\n  }\n\n  /**\n   * Drags element while mouse is clicked\n   * @param event mousemove event\n   */\n  private drag(event: MouseEvent) {\n    if (this.dragging && this.draggingObject) {\n      this.draggingObject.setAttributeNS(null, \"cx\", event.offsetX.toString());\n      this.draggingObject.setAttributeNS(null, \"cy\", event.offsetY.toString());\n    }\n  }\n\n  /**\n   * Stops dragging element\n   * @param event mouseup event\n   */\n  private endDrag(_: MouseEvent) {\n    if (this.dragging) {\n      this.dragging = false;\n      this.draggingObject.style.fill = \"black\";\n      this.draggingObject = null;\n    }\n  }\n\n  /**\n   * Remove all lines from canvas\n   */\n  public removeLines() {\n    let currentLines = this.canvas.getElementsByClassName(\"line\");\n    let currentLinesArray = Array.from(currentLines);\n    currentLinesArray.forEach((line) => line.remove());\n  }\n\n  /**\n   * Remove all points from canvas\n   */\n  public removePoints() {\n    this.points.forEach((p) => p.remove());\n    this.points = [];\n  }\n\n  /**\n   * Remove lines and points from canvas\n   */\n  public clearCanvas() {\n    this.removeLines();\n    this.removePoints();\n    this.polygon = { points: [], lines: [] };\n  }\n\n  /**\n   * Adds polygon point\n   * @param event\n   */\n  private addPolygonPoint(event: MouseEvent) {\n    if (this.creatingPolygon) {\n      const point = this.addPointOnClick(event);\n      this.polygon.points.push(point);\n\n      if (this.polygon.points.length > 1) {\n        const secondLastPoint = this.polygon.points[this.polygon.points.length - 2];\n        const line = this.makeLine(point, secondLastPoint);\n        this.polygon.lines.push(line);\n      }\n\n      if (this.polygon.points.length > 2) {\n        if (this.polygon.points.length > 3) {\n          this.polygon.lines.splice(this.polygon.lines.length - 2, 1)[0].remove();\n        }\n        const firstPoint = this.polygon.points[0];\n        const line = this.makeLine(firstPoint, point);\n        this.polygon.lines.push(line);\n      }\n    }\n  }\n\n  /**\n   * Add line going from first to second point on canvas\n   * @param pointA first point\n   * @param pointB second point\n   */\n  public makeLine(pointA: SvgCircle, pointB: SvgCircle, color?: string, id?: string): SvgLine {\n    let newLine: SvgLine = <SvgLine>document.createElementNS(\"http://www.w3.org/2000/svg\", \"line\");\n    if (id) {\n      newLine.setAttribute(\"id\", id);\n    }\n    newLine.setAttribute(\"class\", \"line\");\n    newLine.setAttribute(\"x1\", pointA.getAttribute(\"cx\"));\n    newLine.setAttribute(\"y1\", pointA.getAttribute(\"cy\"));\n    newLine.setAttribute(\"x2\", pointB.getAttribute(\"cx\"));\n    newLine.setAttribute(\"y2\", pointB.getAttribute(\"cy\"));\n    newLine.setAttribute(\"stroke\", color || \"black\");\n    const canvas = this.canvas;\n    const line = canvas.appendChild(newLine);\n    return line;\n  }\n\n  /**\n   * Add line going from first to second point on canvas\n   * @param pointA first point\n   * @param pointB second point\n   */\n  public makeLinePoints(pointA: Point, pointB: Point, color?: string, id?: string): SvgLine {\n    let newLine: SvgLine = <SvgLine>document.createElementNS(\"http://www.w3.org/2000/svg\", \"line\");\n    if (id) {\n      newLine.setAttribute(\"id\", id);\n    }\n    newLine.setAttribute(\"class\", \"line\");\n    console.log(pointA);\n    newLine.setAttribute(\"x1\", pointA.x.toString());\n    newLine.setAttribute(\"y1\", pointA.y.toString());\n    newLine.setAttribute(\"x2\", pointB.x.toString());\n    newLine.setAttribute(\"y2\", pointB.y.toString());\n    newLine.setAttribute(\"stroke\", color || \"black\");\n    const canvas = this.canvas;\n    const line = canvas.appendChild(newLine);\n    return line;\n  }\n\n  /**\n   * Returns polygon that is on plane\n   */\n  public getPolygon(): Polygon {\n    return this.polygon;\n  }\n\n  public startCreatingPolygon(): void {\n    this.clearCanvas();\n    this.creatingPolygon = true;\n  }\n\n  public stopCreatingPolygon(): void {\n    this.creatingPolygon = false;\n  }\n\n  /**\n   * Adds n points at random locations\n   * @param n number of points to add\n   */\n  public addRandomPoints(n: number) {\n    for (let i = 0; i < n; i++) {\n      // 50 is padding around edge where we dont want to add points\n      let x = Math.random() * (this.canvas.clientWidth - 50 - 50) + 50;\n      let y = Math.random() * (this.canvas.clientHeight - 50 - 50) + 50;\n      this.addPoint(x, y);\n    }\n  }\n\n  /**\n   * Gets points of canvas in simple format\n   */\n  public getSimplePoints(): Point[] {\n    const simplePoints = this.points.map((point: SvgCircle) => ({\n      x: Number(point.getAttribute(\"cx\")),\n      y: Number(point.getAttribute(\"cy\")),\n      color: \"black\",\n    }));\n\n    return simplePoints;\n  }\n}\n","import { SvgCircle } from \"./Canvas\";\n\nexport class Utils {\n  /**\n   * Check if pointC is on left side of line going from pointA to pointB\n   * @param pointA First point\n   * @param pointB Second point\n   * @param pointC Point that we are checking if is on left\n   */\n  public static isOnLeft(pointA: SvgCircle, pointB: SvgCircle, pointC: SvgCircle): boolean {\n    const d =\n      (Number(pointC.getAttribute(\"cx\")) - Number(pointA.getAttribute(\"cx\"))) *\n        (Number(pointB.getAttribute(\"cy\")) - Number(pointA.getAttribute(\"cy\"))) -\n      (Number(pointC.getAttribute(\"cy\")) - Number(pointA.getAttribute(\"cy\"))) *\n        (Number(pointB.getAttribute(\"cx\")) - Number(pointA.getAttribute(\"cx\")));\n\n    return d < 0;\n  }\n}\n","import { SvgCircle, SvgInHtml, Canvas, SVG_NAMESPACE } from \"./Canvas\";\nimport { Utils } from \"./Utils\";\n\nexport class ConvexHull {\n  canvas: Canvas;\n\n  constructor(canvas: Canvas) {\n    this.canvas = canvas;\n  }\n\n  /**\n   * Creates convex hull using Jarvis March algorithm\n   * @param points array of points\n   */\n  public async JarvisMarch(): Promise<SvgCircle[]> {\n    this.canvas.removeLines();\n    const points = this.canvas.getPoints();\n    this.colorPointsBlack(points);\n    const convexHull: SvgCircle[] = [];\n    let leftmostPoint: SvgCircle = points[0];\n\n    // Find the leftmost point\n    points.slice(1).forEach((p: SvgCircle) => {\n      if (Number(p.getAttribute(\"cx\")) < Number(leftmostPoint.getAttribute(\"cx\"))) {\n        leftmostPoint = p;\n      }\n    });\n\n    let pointOnHull: SvgCircle = leftmostPoint;\n    let endpoint: SvgCircle;\n    let i = 0;\n    do {\n      pointOnHull.style.fill = \"red\";\n      convexHull.push(pointOnHull);\n      endpoint = points[0];\n      let currentLine: SVGLineElement;\n\n      for (let j = 0; j < points.length; j++) {\n        currentLine = this.canvas.makeLine(points[j], pointOnHull, \"green\");\n        if (this.isPointEqual(endpoint, pointOnHull) || Utils.isOnLeft(pointOnHull, endpoint, points[j])) {\n          endpoint = points[j];\n        }\n        await this.timer(5);\n        currentLine?.remove();\n      }\n      if (endpoint) {\n        this.canvas.makeLine(endpoint, pointOnHull, \"red\");\n        endpoint.style.fill = \"red\";\n      }\n      pointOnHull = endpoint;\n      i++;\n    } while (!this.isPointEqual(endpoint, convexHull[0]) && i < 50);\n    return new Promise((res) => res(convexHull));\n  }\n\n  /**\n   * Colors are points with black color\n   * @param points list of points\n   */\n  colorPointsBlack(points: SvgCircle[]): void {\n    points.forEach((point) => (point.style.fill = \"black\"));\n  }\n\n  /**\n   * Creates convex hull using Graham Scan algorithm\n   * @param points array of points\n   */\n  public async GrahamScan(): Promise<SvgCircle[]> {\n    this.canvas.removeLines();\n    const points = this.canvas.getPoints();\n    this.colorPointsBlack(points);\n    let stack: SvgCircle[] = [];\n\n    // Leftmost point (if two points are equally leftmost, than the point that is lower is selected)\n    let leftmostPoint: SvgCircle = points[0];\n\n    // Find the leftmost point\n    points.slice(1).forEach((p: SvgCircle) => {\n      if (Number(p.getAttribute(\"cx\")) < Number(leftmostPoint.getAttribute(\"cx\"))) {\n        leftmostPoint = p;\n      }\n\n      if (Number(p.getAttribute(\"cx\")) === Number(leftmostPoint.getAttribute(\"cx\"))) {\n        if (Number(p.getAttribute(\"cy\")) < Number(leftmostPoint.getAttribute(\"cy\"))) {\n          leftmostPoint = p;\n        }\n      }\n    });\n\n    // Sort points by the angle they and leftmost point make with x-axis\n    points.sort((a, b) => (Utils.isOnLeft(leftmostPoint, a, b) ? -1 : 1));\n\n    let lines: SVGLineElement[] = [];\n\n    for (let i = 0; i < points.length; i++) {\n      let point = points[i];\n\n      while (stack.length > 1 && Utils.isOnLeft(stack[stack.length - 2], point, stack[stack.length - 1])) {\n        stack.pop().style.fill = \"black\";\n        lines.pop().remove();\n      }\n\n      if (stack.length >= 1) {\n        lines.push(this.canvas.makeLine(stack[stack.length - 1], point, \"red\"));\n      }\n\n      stack.push(point);\n      point.style.fill = \"red\";\n      await this.timer(200);\n    }\n\n    // this.makeLine(stack[0], stack[stack.length - 1], \"red\");\n    lines.push(this.canvas.makeLine(stack[stack.length - 1], stack[0], \"red\"));\n\n    return new Promise((res) => res(stack));\n  }\n\n  /**\n   * Detects if points are equal. Points are equal if their coordinates are equal\n   * @param pointA first point\n   * @param pointB second point\n   */\n  private isPointEqual(pointA: SvgCircle, pointB: SvgCircle) {\n    if (\n      Number(pointA.getAttribute(\"cx\")) === Number(pointB.getAttribute(\"cx\")) &&\n      Number(pointA.getAttribute(\"cy\")) === Number(pointB.getAttribute(\"cy\"))\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  private timer(ms) {\n    return new Promise((res) => setTimeout(res, ms));\n  }\n}\n","import { Canvas } from \"./Canvas\";\nimport { Utils } from \"./Utils\";\n\nexport class Triangulation {\n  canvas: Canvas;\n\n  constructor(canvas: Canvas) {\n    this.canvas = canvas;\n  }\n\n  /**\n   * Creates triangulation using sweeping line algorithm\n   */\n  public async SweepingLine(): Promise<SVGLineElement[]> {\n    const polygon = this.canvas.getPolygon();\n    const pointsSorted = [...polygon.points];\n    const points = [...polygon.points];\n    // Sort points lexicographically (primary top to down, secondary left to right)\n    pointsSorted.sort((a, b) => {\n      if (Number(a.getAttribute(\"cy\")) > Number(b.getAttribute(\"cy\"))) {\n        return -1;\n      } else if (Number(a.getAttribute(\"cy\")) === Number(b.getAttribute(\"cy\"))) {\n        if (Number(a.getAttribute(\"cx\")) < Number(b.getAttribute(\"cx\"))) {\n          return -1;\n        } else {\n          return 1;\n        }\n      } else {\n        return 1;\n      }\n    });\n    pointsSorted[0].style.fill = \"green\";\n    pointsSorted[pointsSorted.length - 1].style.fill = \"red\";\n\n    // Split points based on which line they lay\n    const firstIndex = (points.indexOf(pointsSorted[0]) + 1) % points.length;\n    let i = points.length - 1;\n    let currentIndex = firstIndex;\n    let firstPath = [];\n    let secondPath = [];\n    let currentPath = firstPath;\n    let currentColor = \"yellow\";\n\n    while (i > 0) {\n      console.log(\"checking\", currentIndex);\n      if (points[currentIndex] == pointsSorted[pointsSorted.length - 1]) {\n        currentPath = secondPath;\n        currentColor = \"white\";\n      } else {\n        points[currentIndex].style.fill = currentColor;\n        currentPath.push(points[currentIndex]);\n      }\n      currentIndex = (currentIndex + 1) % points.length;\n      i--;\n    }\n\n    // Iterate\n    let stack = [];\n    stack.push(pointsSorted[0]);\n    stack.push(pointsSorted[1]);\n\n    for (let i = 2; i < pointsSorted.length; i++) {\n      // if v_i and the top of the stack lie on the same path (left or right)\n      if (\n        (firstPath.includes(pointsSorted[i]) && firstPath.includes(stack[stack.length - 1])) ||\n        (secondPath.includes(pointsSorted[i]) && secondPath.includes(stack[stack.length - 1]))\n      ) {\n        while (stack.length > 1) {\n          if (\n            (firstPath.includes(pointsSorted[i]) &&\n              Utils.isOnLeft(pointsSorted[i], stack[stack.length - 2], stack[stack.length - 1])) ||\n            (secondPath.includes(pointsSorted[i]) &&\n              !Utils.isOnLeft(pointsSorted[i], stack[stack.length - 2], stack[stack.length - 1]))\n          ) {\n            this.canvas.makeLine(pointsSorted[i], stack[stack.length - 2], \"blue\");\n            stack.pop();\n          } else {\n            break;\n          }\n        }\n        stack.push(pointsSorted[i]);\n      } else {\n        const top = stack[stack.length - 1];\n        while (stack.length > 0) {\n          this.canvas.makeLine(pointsSorted[i], stack.pop(), \"red\");\n        }\n        stack.push(top);\n        stack.push(pointsSorted[i]);\n      }\n      await this.timer(500);\n    }\n\n    return;\n  }\n\n  private timer(ms) {\n    return new Promise((res) => setTimeout(res, ms));\n  }\n}\n","import { Canvas, Point } from \"./Canvas\";\n\nexport class KDTree {\n  canvas: Canvas;\n\n  constructor(canvas: Canvas) {\n    this.canvas = canvas;\n  }\n\n  public buildKDTree(\n    points: Point[],\n    depth: number,\n    leftX: number = 0,\n    rightX: number = Number(this.canvas.getCanvas().clientWidth),\n    topY: number = 0,\n    bottomY: number = Number(this.canvas.getCanvas().clientHeight)\n  ): KDNode {\n    if (points.length == 1) {\n      return new KDNode(2, 1, points[0], null, null, null);\n    }\n    let p1: Point[];\n    let p2: Point[];\n    let medianPoint: Point;\n    let v_left: KDNode;\n    let v_right: KDNode;\n    if (!(depth % 2)) {\n      // Vertical\n      const sortedPointsByX = this.sortPoints(points, \"x\");\n      medianPoint = this.selectMedianPoint(sortedPointsByX);\n      this.drawLine(bottomY, topY, medianPoint.x, \"x\");\n      [p1, p2] = this.splitByMedianPoint(sortedPointsByX);\n      v_left = this.buildKDTree(p1, depth + 1, leftX, medianPoint.x, topY, bottomY);\n      v_right = this.buildKDTree(p2, depth + 1, medianPoint.x, rightX, topY, bottomY);\n    } else {\n      // Horizontal\n      const sortedPointsByY = this.sortPoints(points, \"y\");\n      medianPoint = this.selectMedianPoint(sortedPointsByY);\n      this.drawLine(leftX, rightX, medianPoint.y, \"y\");\n      [p1, p2] = this.splitByMedianPoint(sortedPointsByY);\n      v_left = this.buildKDTree(p1, depth + 1, leftX, rightX, topY, medianPoint.y);\n      v_right = this.buildKDTree(p2, depth + 1, leftX, rightX, medianPoint.y, bottomY);\n    }\n\n    const newNode = new KDNode(2, depth, medianPoint, null, v_left, v_right);\n\n    v_left.setParent(newNode);\n    v_right.setParent(newNode);\n\n    return newNode;\n  }\n\n  private sortPoints(points: Point[], axis: \"x\" | \"y\") {\n    const sortedPoints = points.sort((a: Point, b: Point) => {\n      if (axis == \"x\") {\n        return a.x - b.x;\n      } else if (axis == \"y\") {\n        return a.y - b.y;\n      }\n    });\n    return sortedPoints;\n  }\n\n  private splitByMedianPoint(points: Point[]): [Point[], Point[]] {\n    const firstHalf = points.slice(0, Math.floor(points.length / 2));\n    const secondHalf = points.slice(Math.floor(points.length / 2));\n    return [firstHalf, secondHalf];\n  }\n\n  private selectMedianPoint(points: Point[]): Point {\n    return points[Math.floor(points.length / 2)];\n  }\n\n  private drawLine(start: number, end: number, coord: number, axis: \"x\" | \"y\") {\n    //   Vertical (red)\n    if (axis == \"x\") {\n      this.canvas.makeLinePoints({ x: coord, y: start, color: \"\" }, { x: coord, y: end, color: \"\" }, \"red\");\n      //   Horizontal (blue)\n    } else {\n      this.canvas.makeLinePoints({ x: start, y: coord, color: \"\" }, { x: end, y: coord, color: \"\" }, \"blue\");\n    }\n  }\n}\n\nexport class KDNode {\n  private k: number;\n  private depth: number;\n  private point: Point;\n  private parent: KDNode;\n  private lesser: KDNode;\n  private greater: KDNode;\n\n  public constructor(k: number, depth: number, point: Point, parent: KDNode, lesser: KDNode, greater: KDNode) {\n    this.k = k;\n    this.depth = depth;\n    this.point = point;\n    this.parent = parent;\n    this.lesser = lesser;\n    this.greater = greater;\n  }\n\n  public setParent(p: KDNode) {\n    this.parent = p;\n  }\n}\n","import { Canvas } from \"./Canvas\";\nimport { ConvexHull } from \"./ConvexHull\";\nimport { Triangulation } from \"./Triangulation\";\nimport { KDTree } from \"./KDTree\";\nconst svgLibrary = { Canvas, ConvexHull, Triangulation, KDTree };\nexport default svgLibrary;\n"],"names":["canvasId","points","lines","canvas","document","getElementById","addEventListener","drag","bind","endDrag","addPointOnClick","addPolygonPoint","Canvas","x","y","color","console","log","circle","createElementNS","setAttributeNS","toString","startDrag","push","appendChild","event","addPoint","offsetX","offsetY","style","backgroundColor","draggingObject","target","fill","dragging","currentLines","getElementsByClassName","currentLinesArray","Array","from","forEach","line","remove","p","removeLines","removePoints","polygon","creatingPolygon","point","length","secondLastPoint","makeLine","splice","firstPoint","pointA","pointB","id","newLine","setAttribute","getAttribute","clearCanvas","n","i","Math","random","clientWidth","clientHeight","simplePoints","map","Utils","pointC","d","ConvexHull","Promise","getPoints","colorPointsBlack","convexHull","leftmostPoint","slice","pointOnHull","endpoint","currentLine","j","isPointEqual","isOnLeft","timer","_a","res","stack","sort","a","b","pop","ms","setTimeout","Triangulation","getPolygon","pointsSorted","firstIndex","indexOf","currentIndex","firstPath","secondPath","currentPath","currentColor","i_1","includes","top","floor","KDTree","depth","leftX","rightX","topY","bottomY","getCanvas","KDNode","p1","p2","medianPoint","v_left","v_right","sortedPointsByX","sortPoints","selectMedianPoint","drawLine","splitByMedianPoint","buildKDTree","sortedPointsByY","_b","newNode","setParent","axis","sortedPoints","firstHalf","secondHalf","start","end","coord","makeLinePoints","k","parent","lesser","greater"],"mappings":"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"}